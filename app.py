# main_fund_data.py
import math
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import numpy as np
import pandas as pd
import streamlit as st
import plotly.express as px
from vnstock import Fund, Quote

# === H√†m cache ƒë·ªÉ l·∫•y v√† x·ª≠ l√Ω d·ªØ li·ªáu qu·ªπ m·ªü ===
@st.cache_data(show_spinner=True, ttl=60 * 30) # Gi·∫£m TTL xu·ªëng 30 ph√∫t v√¨ d·ªØ li·ªáu NAV c·∫≠p nh·∫≠t h√†ng ng√†y
def get_fund_listing_cached(fund_type: str = ""):
    """L·∫•y danh s√°ch qu·ªπ v√† x·ª≠ l√Ω ƒë·ªãnh d·∫°ng"""
    fund = Fund()
    try:
        df = fund.listing(fund_type=fund_type)
        if df.empty:
            return df
        # Danh s√°ch c·ªôt ph·∫ßn trƒÉm c·∫ßn ƒë·ªãnh d·∫°ng (ƒê√É B·ªî SUNG nav_change_ytd)
        pct_cols = [
            'nav_change_previous', 'nav_change_last_year', 'nav_change_inception',
            'nav_change_1m', 'nav_change_3m', 'nav_change_6m',
            'nav_change_ytd', # <-- B·ªï sung
            'nav_change_12m', 'nav_change_24m', 'nav_change_36m'
        ]
        # ƒê·ªãnh d·∫°ng c√°c c·ªôt ph·∫ßn trƒÉm
        for col in pct_cols:
            if col in df.columns:
                df[col] = df[col].apply(lambda x: f"{x:.2f}%" if not pd.isna(x) else "‚Äî")
        # ƒê·ªãnh d·∫°ng NAV
        if 'nav' in df.columns:
            df['nav'] = df['nav'].apply(lambda x: f"{x:,.0f}" if not pd.isna(x) else "‚Äî")
        # ƒê·ªãnh d·∫°ng ph√≠ qu·∫£n l√Ω
        if 'management_fee' in df.columns:
            df['management_fee'] = df['management_fee'].apply(lambda x: f"{x:.2f}%" if not pd.isna(x) else "‚Äî")
        return df
    except Exception as e:
        return pd.DataFrame()

# === H√†m cache ƒë·ªÉ l·∫•y d·ªØ li·ªáu chi ti·∫øt qu·ªπ (NAV Report) ===
@st.cache_data(show_spinner=True, ttl=60 * 60 * 4) # TƒÉng TTL l√™n 4h v√¨ NAV th∆∞·ªùng c·∫≠p nh·∫≠t 1 ng√†y/l·∫ßn
def get_fund_nav_report_cached(symbol: str):
    """L·∫•y b√°o c√°o NAV c·ªßa qu·ªπ"""
    fund = Fund()
    try:
        nav_df = fund.details.nav_report(symbol)
        if nav_df is not None and not nav_df.empty:
            nav_df['date'] = pd.to_datetime(nav_df['date'])
        return nav_df
    except Exception as e:
        return pd.DataFrame()

# === H√†m cache ƒë·ªÉ l·∫•y d·ªØ li·ªáu chi ti·∫øt qu·ªπ (Top Holdings) ===
@st.cache_data(show_spinner=True, ttl=60 * 60 * 12) # TƒÉng TTL l√™n 12h v√¨ th√¥ng tin n√†y thay ƒë·ªïi kh√¥ng qu√° nhanh
def get_fund_top_holdings_cached(symbol: str):
    """L·∫•y danh m·ª•c ƒë·∫ßu t∆∞ l·ªõn nh·∫•t c·ªßa qu·ªπ"""
    fund = Fund()
    try:
        return fund.details.top_holding(symbol)
    except Exception as e:
        return pd.DataFrame()

# === H√†m cache ƒë·ªÉ l·∫•y d·ªØ li·ªáu chi ti·∫øt qu·ªπ (Industry Holdings) ===
@st.cache_data(show_spinner=True, ttl=60 * 60 * 12) # TƒÉng TTL l√™n 12h
def get_fund_industry_holdings_cached(symbol: str):
    """L·∫•y ph√¢n b·ªï theo ng√†nh c·ªßa qu·ªπ"""
    fund = Fund()
    try:
        return fund.details.industry_holding(symbol)
    except Exception as e:
        return pd.DataFrame()

# === H√†m cache ƒë·ªÉ l·∫•y d·ªØ li·ªáu chi ti·∫øt qu·ªπ (Asset Holdings) ===
@st.cache_data(show_spinner=True, ttl=60 * 60 * 12) # TƒÉng TTL l√™n 12h
def get_fund_asset_holdings_cached(symbol: str):
    """L·∫•y ph√¢n b·ªï theo lo·∫°i t√†i s·∫£n c·ªßa qu·ªπ"""
    fund = Fund()
    try:
        raw_df = fund.details.asset_holding(symbol)
        if raw_df is not None and not raw_df.empty:
            df = raw_df.copy() # T·∫°o b·∫£n sao ƒë·ªÉ tr√°nh c·∫£nh b√°o SettingWithCopyWarning
            if 'short_name' not in df.columns:
                df['short_name'] = symbol
            return df
        return raw_df
    except Exception as e:
        return pd.DataFrame()

# === H√†m cache ƒë·ªÉ l·∫•y d·ªØ li·ªáu l·ªãch s·ª≠ c·ªßa ch·ªâ s·ªë th·ªã tr∆∞·ªùng ===
@st.cache_data(show_spinner=True, ttl=60 * 60 * 2) # TTL 2 gi·ªù cho d·ªØ li·ªáu ch·ªâ s·ªë
def get_market_index_history_cached(index_symbol: str, start_date: str, end_date: str):
    """L·∫•y d·ªØ li·ªáu l·ªãch s·ª≠ gi√° c·ªßa ch·ªâ s·ªë th·ªã tr∆∞·ªùng"""
    try:
        quote = Quote(symbol=index_symbol, source='VCI')
        df = quote.history(start=start_date, end=end_date, interval='1D', to_df=True)
        if df is not None and not df.empty:
            df['time'] = pd.to_datetime(df['time'])
            if 'close' in df.columns:
                df = df.rename(columns={'close': 'close_price'})
            df['symbol'] = index_symbol
            df = df[['time', 'close_price', 'symbol']].copy()
        return df
    except Exception as e:
        st.warning(f"L·ªói khi l·∫•y d·ªØ li·ªáu l·ªãch s·ª≠ cho ch·ªâ s·ªë {index_symbol}: {e}")
        return pd.DataFrame()

# === H√†m h·ªó tr·ª£ ƒë·ªãnh d·∫°ng ===
def fmt_pct(x):
    if pd.isna(x): return "‚Äî"
    return f"{x * 100:.1f}%"

def fmt_money_vnd(x):
    try:
        x = float(x)
    except Exception:
        return ""
    if pd.isna(x):
        return "‚Äî"
    if x >= 1e12:
        return f"{x / 1e12:.2f} ngh√¨n t·ª∑"
    return f"{x / 1e9:.1f} t·ª∑"

# === C·∫•u h√¨nh trang ===
st.set_page_config(page_title="D·ªØ li·ªáu Qu·ªπ M·ªü (Streamlit)", layout="wide")
st.title("   üìä    H·ªá th·ªëng Ph√¢n t√≠ch D·ªØ li·ªáu Qu·ªπ M·ªü")
st.caption("D·ªØ li·ªáu ƒë∆∞·ª£c cung c·∫•p b·ªüi Fmarket th√¥ng qua th∆∞ vi·ªán vnstock. C·∫≠p nh·∫≠t theo ng√†y NAV c√¥ng b·ªë.")

# B·ªô l·ªçc
st.subheader("üéØ B·ªô l·ªçc")
fund_type_options = {
    "T·∫•t c·∫£ qu·ªπ": "",
    "Qu·ªπ c·ªï phi·∫øu": "STOCK",
    "Qu·ªπ tr√°i phi·∫øu": "BOND",
    "Qu·ªπ c√¢n b·∫±ng": "BALANCED"
}
selected_type_label = st.selectbox(
    "Lo·∫°i qu·ªπ",
    options=list(fund_type_options.keys()),
    index=0
)
selected_type = fund_type_options[selected_type_label]

# N√∫t t·∫£i l·∫°i d·ªØ li·ªáu
refresh_fund_btn = st.button("üîÑ T·∫£i l·∫°i d·ªØ li·ªáu qu·ªπ")

# --- Hi·ªÉn th·ªã d·ªØ li·ªáu danh s√°ch qu·ªπ ---
try:
    if refresh_fund_btn:
        get_fund_listing_cached.clear()
    fund_data = get_fund_listing_cached(fund_type=selected_type)
    if fund_data.empty:
        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu qu·ªπ m·ªü ƒë·ªÉ hi·ªÉn th·ªã v·ªõi b·ªô l·ªçc hi·ªán t·∫°i.")
    else:
        # Ch·ªçn c·ªôt ƒë·ªÉ hi·ªÉn th·ªã
        display_columns = [
            'short_name', 'name', 'fund_type', 'fund_owner_name',
            'management_fee', 'nav', 'nav_change_previous',
            'nav_change_1m', 'nav_change_3m',
            'nav_change_ytd',
            'nav_change_12m',
            'nav_update_at'
        ]
        column_names_vietnamese = {
            'short_name': 'M√£ Qu·ªπ',
            'name': 'T√™n Qu·ªπ',
            'fund_type': 'Lo·∫°i Qu·ªπ',
            'fund_owner_name': 'C√¥ng ty Qu·∫£n l√Ω',
            'management_fee': 'Ph√≠ qu·∫£n l√Ω',
            'nav': 'NAV/unit (VNƒê)',
            'nav_change_previous': 'TƒÉng tr∆∞·ªüng 1N',
            'nav_change_1m': 'TƒÉng tr∆∞·ªüng 1T',
            'nav_change_3m': 'TƒÉng tr∆∞·ªüng 3T',
            'nav_change_ytd': 'TƒÉng tr∆∞·ªüng YTD',
            'nav_change_12m': 'TƒÉng tr∆∞·ªüng 1NƒÉm',
            'nav_update_at': 'Ng√†y c·∫≠p nh·∫≠t NAV'
        }
        available_display_columns = [col for col in display_columns if col in fund_data.columns]
        display_df = fund_data[available_display_columns].rename(columns=column_names_vietnamese)

        # --- Hi·ªÉn th·ªã b·∫£ng danh s√°ch qu·ªπ ---
        st.subheader("üìã Danh s√°ch Qu·ªπ")
        display_df_reset = display_df.reset_index(drop=True)
        display_df_reset.index = display_df_reset.index + 1
        st.dataframe(display_df_reset, use_container_width=True, height=500)

        # --- Th√™m ph·∫ßn ch·ªçn qu·ªπ ƒë·ªÉ xem chi ti·∫øt ---
        st.markdown("---")
        st.subheader("üîç Ch·ªçn Qu·ªπ ƒë·ªÉ Xem Chi Ti·∫øt")
        if 'M√£ Qu·ªπ' in display_df.columns:
            fund_options = display_df.apply(lambda row: f"{row['M√£ Qu·ªπ']} - {row.get('T√™n Qu·ªπ', 'N/A')}", axis=1).tolist()
            selected_fund_option = st.selectbox(
                "Ch·ªçn m·ªôt qu·ªπ:",
                options=fund_options,
                index=0,
                key="fund_detail_selector"
            )
            if selected_fund_option:
                selected_fund_shortname = selected_fund_option.split(" - ")[0]
                st.markdown("---")
                st.subheader(f"üìà Chi ti·∫øt Qu·ªπ: {selected_fund_option}")
                # 1. B√°o c√°o tƒÉng tr∆∞·ªüng NAV
                st.write("**1. B√°o c√°o tƒÉng tr∆∞·ªüng NAV (Gi√° Tr·ªã T√†i S·∫£n R√≤ng tr√™n m·ªói ƒë∆°n v·ªã qu·ªπ)**")
                nav_report_df = get_fund_nav_report_cached(selected_fund_shortname)
                if nav_report_df is None or nav_report_df.empty:
                    st.info("Kh√¥ng c√≥ d·ªØ li·ªáu b√°o c√°o NAV cho qu·ªπ n√†y.")
                else:
                    with st.expander("Xem d·ªØ li·ªáu NAV g·∫ßn ƒë√¢y"):
                        nav_display = nav_report_df.tail(20).reset_index(drop=True)
                        nav_display.index = nav_display.index + 1
                        st.dataframe(nav_display[['date', 'nav_per_unit']], use_container_width=True)
                    nav_df_sorted = nav_report_df.sort_values('date').reset_index(drop=True)
                    if len(nav_df_sorted) < 2:
                        st.info("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì NAV (c·∫ßn √≠t nh·∫•t 2 ƒëi·ªÉm d·ªØ li·ªáu).")
                    else:
                        latest_nav_all = nav_df_sorted['nav_per_unit'].iloc[-1]
                        first_nav_all = nav_df_sorted['nav_per_unit'].iloc[0]
                        total_growth_pct_all = ((latest_nav_all - first_nav_all) / first_nav_all) * 100 if first_nav_all != 0 else 0
                        time_periods = {
                            "3 th√°ng": 90,
                            "6 th√°ng": 180,
                            "12 th√°ng": 365,
                            "36 th√°ng": 3 * 365,
                            "T·∫•t c·∫£": "all"
                        }
                        period_selection = st.selectbox(
                            "Ch·ªçn kho·∫£ng th·ªùi gian bi·ªÉu ƒë·ªì NAV",
                            options=list(time_periods.keys()),
                            index=4,
                            key=f"nav_period_selector_{selected_fund_shortname}"
                        )
                        start_idx = 0
                        selected_data = nav_df_sorted
                        selected_growth_pct = total_growth_pct_all
                        if period_selection != "T·∫•t c·∫£":
                            days_needed = time_periods[period_selection]
                            if days_needed != "all":
                                latest_date = nav_df_sorted['date'].iloc[-1]
                                target_start_date = latest_date - pd.Timedelta(days=days_needed)
                                date_diffs = (nav_df_sorted['date'] - target_start_date).abs()
                                start_idx = date_diffs.idxmin()
                                selected_data = nav_df_sorted.iloc[start_idx:].copy()
                                if not selected_data.empty:
                                    selected_start_nav = selected_data['nav_per_unit'].iloc[0]
                                    selected_end_nav = selected_data['nav_per_unit'].iloc[-1]
                                    selected_growth_pct = ((selected_end_nav - selected_start_nav) / selected_start_nav) * 100 if selected_start_nav != 0 else 0
                                else:
                                    selected_growth_pct = 0
                                    st.warning(f"Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh tƒÉng tr∆∞·ªüng cho kho·∫£ng th·ªùi gian {period_selection}.")
                        st.metric("TƒÉng tr∆∞·ªüng NAV", f"{selected_growth_pct:+.2f}%", delta=None)
                        filtered_data = selected_data[['date', 'nav_per_unit']].copy()
                        fig_nav = px.line(
                            filtered_data,
                            x='date',
                            y='nav_per_unit',
                            title=f'Bi·∫øn ƒë·ªông NAV - {selected_fund_shortname} ({period_selection})',
                            labels={'date': 'Ng√†y', 'nav_per_unit': 'NAV tr√™n m·ªói ƒë∆°n v·ªã'}
                        )
                        fig_nav.update_xaxes(title_text='Ng√†y')
                        fig_nav.update_yaxes(title_text='NAV tr√™n m·ªói ƒë∆°n v·ªã')
                        min_val = float(filtered_data['nav_per_unit'].min())
                        max_val = float(filtered_data['nav_per_unit'].max())
                        step = 10000
                        ticks = np.arange(int(min_val // step) * step, int(max_val // step) * step + step, step)
                        tick_labels = [f"{int(tick/1000)}k" for tick in ticks]
                        fig_nav.update_yaxes(tickvals=ticks, ticktext=tick_labels)
                        fig_nav.update_layout(xaxis_rangeslider_visible=True)
                        st.plotly_chart(fig_nav, use_container_width=True)
                        latest_nav_row = nav_df_sorted.loc[nav_df_sorted['date'].idxmax()]
                        latest_nav = latest_nav_row['nav_per_unit']
                        latest_date = latest_nav_row['date']
                        st.metric("NAV g·∫ßn nh·∫•t", f"{latest_nav:,.2f}", f"Ng√†y: {latest_date.strftime('%d/%m/%Y')}")

                # 2. Danh m·ª•c ƒë·∫ßu t∆∞ l·ªõn
                st.write("**2. Danh m·ª•c ƒë·∫ßu t∆∞ l·ªõn nh·∫•t**")
                top_holding_df = get_fund_top_holdings_cached(selected_fund_shortname)
                if top_holding_df is None or top_holding_df.empty:
                    st.info("Kh√¥ng c√≥ d·ªØ li·ªáu danh m·ª•c ƒë·∫ßu t∆∞ l·ªõn cho qu·ªπ n√†y.")
                else:
                    top_holding_vn_df = top_holding_df.rename(columns={
                        'stock_code': 'M√£ c·ªï phi·∫øu',
                        'industry': 'Ng√†nh',
                        'net_asset_percent': 'T·ª∑ tr·ªçng t√†i s·∫£n r√≤ng (%)'
                    })
                    top_holding_display = top_holding_vn_df[['M√£ c·ªï phi·∫øu', 'Ng√†nh', 'T·ª∑ tr·ªçng t√†i s·∫£n r√≤ng (%)']].reset_index(drop=True)
                    top_holding_display.index = top_holding_display.index + 1
                    st.dataframe(top_holding_display, use_container_width=True)
                    date_columns_to_check = ['update_at', 'report_date', 'updated_date', 'date']
                    update_date_str = "Kh√¥ng r√µ"
                    for col in date_columns_to_check:
                        if col in top_holding_df.columns and not top_holding_df[col].isna().all():
                            try:
                                date_series = pd.to_datetime(top_holding_df[col], errors='coerce')
                                if not date_series.dropna().empty:
                                    latest_update_date = date_series.max()
                                    if pd.notna(latest_update_date):
                                        update_date_str = latest_update_date.strftime('%d/%m/%Y')
                                        break
                            except Exception:
                                continue
                    st.caption(f"C·∫≠p nh·∫≠t ƒë·∫øn ng√†y: {update_date_str}")
                    if 'net_asset_percent' in top_holding_df.columns and 'stock_code' in top_holding_df.columns:
                        top_holding_chart_df = top_holding_df[top_holding_df['net_asset_percent'] > 0].copy()
                        if not top_holding_chart_df.empty:
                            fig_top_stocks = px.pie(
                                top_holding_chart_df,
                                values='net_asset_percent',
                                names='stock_code',
                                title=f'Ph√¢n b·ªï t√†i s·∫£n theo m√£ c·ªï phi·∫øu - {selected_fund_shortname}'
                            )
                            st.plotly_chart(fig_top_stocks, use_container_width=True)
                        else:
                            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì ph√¢n b·ªï theo m√£ c·ªï phi·∫øu.")

                # 3. Ph√¢n b·ªï theo ng√†nh
                st.write("**3. Ph√¢n b·ªï t√†i s·∫£n theo ng√†nh**")
                industry_holding_df = get_fund_industry_holdings_cached(selected_fund_shortname)
                if industry_holding_df is None or industry_holding_df.empty:
                    st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ph√¢n b·ªï theo ng√†nh cho qu·ªπ n√†y.")
                else:
                    industry_holding_working_df = industry_holding_df.copy()
                    if 'short_name' not in industry_holding_working_df.columns:
                        industry_holding_working_df['short_name'] = selected_fund_shortname
                    industry_holding_vn_df = industry_holding_working_df.rename(columns={
                        'industry': 'Ng√†nh',
                        'net_asset_percent': 'T·ª∑ tr·ªçng (%)'
                    })
                    columns_to_show = ['Ng√†nh', 'T·ª∑ tr·ªçng (%)']
                    existing_columns_to_show = [col for col in columns_to_show if col in industry_holding_vn_df.columns]
                    industry_holding_display = industry_holding_vn_df[existing_columns_to_show].reset_index(drop=True)
                    industry_holding_display.index = industry_holding_display.index + 1
                    st.dataframe(industry_holding_display, use_container_width=True)
                    if 'net_asset_percent' in industry_holding_df.columns and 'industry' in industry_holding_df.columns:
                        industry_chart_df = industry_holding_df[industry_holding_df['net_asset_percent'] > 0].copy()
                        if not industry_chart_df.empty:
                            fig_industry = px.pie(
                                industry_chart_df,
                                values='net_asset_percent',
                                names='industry',
                                title=f'Ph√¢n b·ªï t√†i s·∫£n theo ng√†nh - {selected_fund_shortname}'
                            )
                            st.plotly_chart(fig_industry, use_container_width=True)
                        else:
                            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì ph√¢n b·ªï theo ng√†nh.")

                # 4. Ph√¢n b·ªï theo lo·∫°i t√†i s·∫£n
                st.write("**4. Ph√¢n b·ªï t√†i s·∫£n**")
                asset_holding_df = get_fund_asset_holdings_cached(selected_fund_shortname)
                if asset_holding_df is None or asset_holding_df.empty:
                    st.info("Kh√¥ng c√≥ d·ªØ li·ªáu ph√¢n b·ªï theo lo·∫°i t√†i s·∫£n cho qu·ªπ n√†y.")
                else:
                    asset_holding_working_df = asset_holding_df.copy()
                    if 'short_name' not in asset_holding_working_df.columns:
                        asset_holding_working_df['short_name'] = selected_fund_shortname
                    asset_holding_vn_df = asset_holding_working_df.rename(columns={
                        'asset_type': 'Lo·∫°i t√†i s·∫£n',
                        'asset_percent': 'T·ª∑ tr·ªçng (%)'
                    })
                    columns_to_show_asset = ['Lo·∫°i t√†i s·∫£n', 'T·ª∑ tr·ªçng (%)']
                    existing_columns_to_show_asset = [col for col in columns_to_show_asset if col in asset_holding_vn_df.columns]
                    asset_holding_display = asset_holding_vn_df[existing_columns_to_show_asset].reset_index(drop=True)
                    asset_holding_display.index = asset_holding_display.index + 1
                    st.dataframe(asset_holding_display, use_container_width=True)
                    if 'asset_percent' in asset_holding_df.columns and 'asset_type' in asset_holding_df.columns:
                        asset_chart_df = asset_holding_df[asset_holding_df['asset_percent'] > 0].copy()
                        if not asset_chart_df.empty:
                            fig_asset = px.pie(
                                asset_chart_df,
                                values='asset_percent',
                                names='asset_type',
                                title=f'Ph√¢n b·ªï t√†i s·∫£n theo lo·∫°i - {selected_fund_shortname}'
                            )
                            st.plotly_chart(fig_asset, use_container_width=True)
                        else:
                            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì ph√¢n b·ªï theo lo·∫°i t√†i s·∫£n.")

        # --- So s√°nh hi·ªáu su·∫•t gi·ªØa c√°c qu·ªπ ---
        st.markdown("---")
        st.subheader("5. üìä So s√°nh hi·ªáu su·∫•t gi·ªØa c√°c qu·ªπ")
        if not fund_data.empty and 'short_name' in fund_data.columns:
            fund_code_to_name_map = fund_data.apply(lambda row: f"{row['short_name']} - {row.get('name', 'N/A')}", axis=1).to_dict()
            fund_codes_for_comparison = fund_data['short_name'].tolist()
            selected_fund_codes_for_comparison = st.multiselect(
                "Ch·ªçn t·ªëi ƒëa 5 qu·ªπ ƒë·ªÉ so s√°nh (theo m√£ qu·ªπ):",
                options=fund_codes_for_comparison,
                max_selections=5,
                format_func=lambda x: fund_code_to_name_map.get(x, x),
                key="fund_comparison_multiselect_tab_fund"
            )
            # --- B·ªï sung l·ª±a ch·ªçn kho·∫£ng th·ªùi gian ---
            col1, col2 = st.columns(2)
            with col1:
                start_date_funds = st.date_input(
                    "Ng√†y b·∫Øt ƒë·∫ßu (Qu·ªπ)",
                    value=datetime.today() - timedelta(days=365),
                    key="start_date_funds"
                )
            with col2:
                end_date_funds = st.date_input(
                    "Ng√†y k·∫øt th√∫c (Qu·ªπ)",
                    value=datetime.today(),
                    key="end_date_funds"
                )
            if start_date_funds > end_date_funds:
                st.error('Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i nh·ªè h∆°n ng√†y k·∫øt th√∫c')
            elif selected_fund_codes_for_comparison:
                with st.spinner("ƒêang t·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu NAV cho so s√°nh..."):
                    comparison_data_list = []
                    fund_with_insufficient_data = []
                    for fund_code in selected_fund_codes_for_comparison:
                        try:
                            nav_df = get_fund_nav_report_cached(fund_code)
                            if nav_df is not None and not nav_df.empty and 'date' in nav_df.columns and 'nav_per_unit' in nav_df.columns:
                                nav_df['date'] = pd.to_datetime(nav_df['date'])
                                nav_df = nav_df.sort_values('date').reset_index(drop=True)
                                # L·ªçc theo kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn
                                nav_df = nav_df[(nav_df['date'] >= pd.Timestamp(start_date_funds)) & (nav_df['date'] <= pd.Timestamp(end_date_funds))]
                                if len(nav_df) < 2:
                                    fund_with_insufficient_data.append(fund_code)
                                    continue
                                nav_df = nav_df.copy()
                                nav_df[f'cumulative_return_{fund_code}'] = (nav_df['nav_per_unit'] / nav_df['nav_per_unit'].iloc[0]) * 100
                                comparison_data_list.append(nav_df[['date', f'cumulative_return_{fund_code}']])
                            else:
                                fund_with_insufficient_data.append(fund_code)
                        except Exception as e:
                            st.warning(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu NAV cho qu·ªπ {fund_code}: {e}")
                            fund_with_insufficient_data.append(fund_code)
                    if fund_with_insufficient_data:
                        st.info(f"C√°c qu·ªπ sau kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn ƒë·ªÉ so s√°nh: {', '.join(fund_with_insufficient_data)}")
                    if comparison_data_list:
                        try:
                            merged_df = comparison_data_list[0]
                            for df in comparison_data_list[1:]:
                                merged_df = pd.merge(merged_df, df, on='date', how='outer')
                            merged_df = merged_df.sort_values('date').reset_index(drop=True)
                            value_vars = [f'cumulative_return_{code}' for code in selected_fund_codes_for_comparison if f'cumulative_return_{code}' in merged_df.columns]
                            if value_vars:
                                plot_df = merged_df.melt(id_vars=['date'], value_vars=value_vars, var_name='Fund_Return_Series', value_name='Cumulative_Return')
                                plot_df['Fund_Code'] = plot_df['Fund_Return_Series'].str.replace('cumulative_return_', '', regex=False)
                                plot_df['Fund_Display_Name'] = plot_df['Fund_Code'].map(fund_code_to_name_map).fillna(plot_df['Fund_Code'])
                                fig_comparison = px.line(
                                    plot_df,
                                    x='date',
                                    y='Cumulative_Return',
                                    color='Fund_Display_Name',
                                    title='So s√°nh Hi·ªáu su·∫•t T√≠ch l≈©y c·ªßa C√°c Qu·ªπ (Base 100)',
                                    labels={'date': 'Ng√†y', 'Cumulative_Return': 'Gi√° tr·ªã T√≠ch l≈©y (Base 100)', 'Fund_Display_Name': 'Qu·ªπ'}
                                )
                                fig_comparison.update_layout(
                                    xaxis_title="Ng√†y",
                                    yaxis_title="Gi√° tr·ªã T√≠ch l≈©y (Base 100)",
                                    legend_title="Qu·ªπ"
                                )
                                st.plotly_chart(fig_comparison, use_container_width=True)
                                with st.expander("Xem d·ªØ li·ªáu chi ti·∫øt"):
                                    display_columns = ['date'] + value_vars
                                    display_df = merged_df[display_columns].copy()
                                    rename_dict = {f'cumulative_return_{code}': fund_code_to_name_map.get(code, code) for code in selected_fund_codes_for_comparison if f'cumulative_return_{code}' in merged_df.columns}
                                    display_df = display_df.rename(columns=rename_dict)
                                    display_df.index = display_df.index + 1
                                    st.dataframe(display_df, use_container_width=True)
                            else:
                                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu l·ª£i su·∫•t t√≠ch l≈©y n√†o ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì.")
                        except Exception as e:
                            st.error(f"L·ªói khi k·∫øt h·ª£p ho·∫∑c v·∫Ω bi·ªÉu ƒë·ªì d·ªØ li·ªáu: {e}")
                    else:
                        st.info("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt qu·ªπ c√≥ d·ªØ li·ªáu h·ª£p l·ªá trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn ƒë·ªÉ so s√°nh.")
            else:
                st.info("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt qu·ªπ ƒë·ªÉ b·∫Øt ƒë·∫ßu so s√°nh.")
        else:
            st.warning("Kh√¥ng th·ªÉ l·∫•y danh s√°ch qu·ªπ ƒë·ªÉ so s√°nh.")

        # --- So s√°nh hi·ªáu su·∫•t qu·ªπ v·ªõi ch·ªâ s·ªë th·ªã tr∆∞·ªùng ---
        st.markdown("---")
        st.subheader("6. üìà So s√°nh hi·ªáu su·∫•t c√°c qu·ªπ v·ªõi ch·ªâ s·ªë th·ªã tr∆∞·ªùng")
        market_indices = ['VNINDEX', 'VN30', 'HNXINDEX', 'UPCOMINDEX', 'HNX30']
        index_name_map = {
            'VNINDEX': 'Ch·ªâ s·ªë VN-Index',
            'VN30': 'Ch·ªâ s·ªë VN30',
            'HNXINDEX': 'Ch·ªâ s·ªë HNX-Index',
            'UPCOMINDEX': 'Ch·ªâ s·ªë UPCOM-Index',
            'HNX30': 'Ch·ªâ s·ªë HNX30'
        }
        col1, col2 = st.columns(2)
        with col1:
            selected_fund_codes_for_index_comparison = st.multiselect(
                "Ch·ªçn qu·ªπ ƒë·ªÉ so s√°nh:",
                options=fund_codes_for_comparison,
                max_selections=5,
                format_func=lambda x: fund_code_to_name_map.get(x, x),
                key="fund_comparison_with_index_funds"
            )
        with col2:
            selected_indices_for_comparison = st.multiselect(
                "Ch·ªçn ch·ªâ s·ªë th·ªã tr∆∞·ªùng ƒë·ªÉ so s√°nh:",
                options=market_indices,
                max_selections=5,
                format_func=lambda x: index_name_map.get(x, x),
                key="fund_comparison_with_index_indices"
            )
            # --- B·ªï sung l·ª±a ch·ªçn kho·∫£ng th·ªùi gian ---
        col1_date, col2_date = st.columns(2)
        with col1_date:
            start_date_indices = st.date_input(
                "Ng√†y b·∫Øt ƒë·∫ßu (Ch·ªâ s·ªë)",
                value=datetime.today() - timedelta(days=365),
                key="start_date_indices"
            )
        with col2_date:
            end_date_indices = st.date_input(
                "Ng√†y k·∫øt th√∫c (Ch·ªâ s·ªë)",
                value=datetime.today(),
                key="end_date_indices"
            )
        if start_date_indices > end_date_indices:
            st.error('Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i nh·ªè h∆°n ng√†y k·∫øt th√∫c')
        elif selected_fund_codes_for_index_comparison or selected_indices_for_comparison:
            all_symbols_to_compare = selected_fund_codes_for_index_comparison + selected_indices_for_comparison
            if len(all_symbols_to_compare) == 0:
                st.info("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt qu·ªπ ho·∫∑c m·ªôt ch·ªâ s·ªë.")
            else:
                with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠ cho qu·ªπ v√† ch·ªâ s·ªë..."):
                    comparison_data_list_with_index = []
                    fund_with_insufficient_data_for_index = []
                    index_with_insufficient_data = []
                    # L·∫•y d·ªØ li·ªáu cho c√°c qu·ªπ ƒë∆∞·ª£c ch·ªçn
                    for fund_code in selected_fund_codes_for_index_comparison:
                        try:
                            nav_df = get_fund_nav_report_cached(fund_code)
                            if nav_df is not None and not nav_df.empty and 'date' in nav_df.columns and 'nav_per_unit' in nav_df.columns:
                                nav_df['date'] = pd.to_datetime(nav_df['date'])
                                nav_df = nav_df.sort_values('date').reset_index(drop=True)
                                # L·ªçc theo kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn
                                nav_df = nav_df[(nav_df['date'] >= pd.Timestamp(start_date_indices)) & (nav_df['date'] <= pd.Timestamp(end_date_indices))]
                                if len(nav_df) < 2:
                                    fund_with_insufficient_data_for_index.append(fund_code)
                                    continue
                                nav_df = nav_df.copy()
                                nav_df[f'cumulative_return_{fund_code}'] = (nav_df['nav_per_unit'] / nav_df['nav_per_unit'].iloc[0]) * 100
                                comparison_data_list_with_index.append(nav_df[['date', f'cumulative_return_{fund_code}']])
                            else:
                                fund_with_insufficient_data_for_index.append(fund_code)
                        except Exception as e:
                            st.warning(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu NAV cho qu·ªπ {fund_code}: {e}")
                            fund_with_insufficient_data_for_index.append(fund_code)
                    # L·∫•y d·ªØ li·ªáu cho c√°c ch·ªâ s·ªë ƒë∆∞·ª£c ch·ªçn
                    for index_code in selected_indices_for_comparison:
                        try:
                            index_df = get_market_index_history_cached(
                                index_symbol=index_code,
                                start_date=start_date_indices.strftime('%Y-%m-%d'),
                                end_date=end_date_indices.strftime('%Y-%m-%d')
                            )
                            if index_df is not None and not index_df.empty and 'time' in index_df.columns and 'close_price' in index_df.columns:
                                index_df['time'] = pd.to_datetime(index_df['time'])
                                index_df = index_df.sort_values('time').reset_index(drop=True)
                                # L·ªçc theo kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn (ƒë√£ ƒë∆∞·ª£c l·ªçc trong h√†m get_market_index_history_cached, nh∆∞ng th√™m l·∫ßn n·ªØa ƒë·ªÉ ch·∫Øc ch·∫Øn)
                                index_df = index_df[(index_df['time'] >= pd.Timestamp(start_date_indices)) & (index_df['time'] <= pd.Timestamp(end_date_indices))]
                                if len(index_df) < 2:
                                    index_with_insufficient_data.append(index_code)
                                    continue
                                index_df = index_df.copy()
                                index_df[f'cumulative_return_{index_code}'] = (index_df['close_price'] / index_df['close_price'].iloc[0]) * 100
                                comparison_data_list_with_index.append(index_df[['time', f'cumulative_return_{index_code}']].rename(columns={'time': 'date'}))
                            else:
                                index_with_insufficient_data.append(index_code)
                        except Exception as e:
                            st.warning(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu l·ªãch s·ª≠ cho ch·ªâ s·ªë {index_code}: {e}")
                            index_with_insufficient_data.append(index_code)
                    if fund_with_insufficient_data_for_index:
                        st.info(f"C√°c qu·ªπ sau kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn ƒë·ªÉ so s√°nh v·ªõi ch·ªâ s·ªë: {', '.join(fund_with_insufficient_data_for_index)}")
                    if index_with_insufficient_data:
                        st.info(f"C√°c ch·ªâ s·ªë sau kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn ƒë·ªÉ so s√°nh: {', '.join(index_with_insufficient_data)}")
                    if comparison_data_list_with_index:
                        try:
                            merged_df_with_index = comparison_data_list_with_index[0]
                            for df in comparison_data_list_with_index[1:]:
                                merged_df_with_index = pd.merge(merged_df_with_index, df, on='date', how='outer')
                            merged_df_with_index = merged_df_with_index.sort_values('date').reset_index(drop=True)
                            date_cols = [col for col in merged_df_with_index.columns if col.startswith('cumulative_return_')]
                            if date_cols:
                                filtered_df = merged_df_with_index.dropna(subset=date_cols, how='all')
                                if not filtered_df.empty:
                                    merged_df_with_index = filtered_df.reset_index(drop=True)
                                else:
                                    st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá n√†o sau khi l·ªçc.")
                                    merged_df_with_index = pd.DataFrame()
                            else:
                                st.warning("Kh√¥ng t√¨m th·∫•y c·ªôt d·ªØ li·ªáu l·ª£i su·∫•t t√≠ch l≈©y n√†o.")
                                merged_df_with_index = pd.DataFrame()
                            if not merged_df_with_index.empty:
                                plot_df_with_index = merged_df_with_index.melt(id_vars=['date'], value_vars=date_cols, var_name='Series_Name', value_name='Cumulative_Return')
                                plot_df_with_index['Symbol'] = plot_df_with_index['Series_Name'].str.replace('cumulative_return_', '', regex=False)
                                def map_display_name(symbol):
                                    if symbol in fund_code_to_name_map:
                                        return fund_code_to_name_map[symbol]
                                    elif symbol in index_name_map:
                                        return index_name_map[symbol]
                                    else:
                                        return symbol
                                plot_df_with_index['Display_Name'] = plot_df_with_index['Symbol'].apply(map_display_name)
                                fig_comparison_with_index = px.line(
                                    plot_df_with_index,
                                    x='date',
                                    y='Cumulative_Return',
                                    color='Display_Name',
                                    title='So s√°nh Hi·ªáu su·∫•t T√≠ch l≈©y: Qu·ªπ vs Ch·ªâ s·ªë Th·ªã tr∆∞·ªùng (Base 100)',
                                    labels={'date': 'Ng√†y', 'Cumulative_Return': 'Gi√° tr·ªã T√≠ch l≈©y (Base 100)', 'Display_Name': 'T√†i s·∫£n'}
                                )
                                fig_comparison_with_index.update_layout(
                                    xaxis_title="Ng√†y",
                                    yaxis_title="Gi√° tr·ªã T√≠ch l≈©y (Base 100)",
                                    legend_title="T√†i s·∫£n"
                                )
                                st.plotly_chart(fig_comparison_with_index, use_container_width=True)
                                with st.expander("Xem d·ªØ li·ªáu chi ti·∫øt"):
                                    display_df_with_index = merged_df_with_index[date_cols + ['date']].copy()
                                    rename_dict_index = {col: map_display_name(col.replace('cumulative_return_', '')) for col in date_cols}
                                    display_df_with_index = display_df_with_index.rename(columns=rename_dict_index)
                                    display_df_with_index.index = display_df_with_index.index + 1
                                    st.dataframe(display_df_with_index, use_container_width=True)
                            else:
                                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá n√†o ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì sau khi x·ª≠ l√Ω.")
                        except Exception as e:
                            st.error(f"L·ªói khi k·∫øt h·ª£p ho·∫∑c v·∫Ω bi·ªÉu ƒë·ªì d·ªØ li·ªáu qu·ªπ v√† ch·ªâ s·ªë: {e}")
                    else:
                        st.info("Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá n√†o t·ª´ qu·ªπ ho·∫∑c ch·ªâ s·ªë trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn ƒë·ªÉ so s√°nh.")
        else:
            st.info("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt qu·ªπ ho·∫∑c m·ªôt ch·ªâ s·ªë ƒë·ªÉ b·∫Øt ƒë·∫ßu so s√°nh.")
except Exception as e:
    st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu qu·ªπ m·ªü: {e}")

st.subheader("üìù Ghi ch√∫")
st.markdown("""
- **NAV**: Gi√° tr·ªã t√†i s·∫£n r√≤ng c·ªßa qu·ªπ tr√™n m·ªói ƒë∆°n v·ªã ch·ª©ng ch·ªâ qu·ªπ (VNƒê).
- **Ph√≠ qu·∫£n l√Ω**: Ph√≠ ƒë∆∞·ª£c t√≠nh h√†ng nƒÉm tr√™n gi√° tr·ªã t√†i s·∫£n c·ªßa nh√† ƒë·∫ßu t∆∞.
- **TƒÉng tr∆∞·ªüng**: T·ª∑ su·∫•t sinh l·ªùi c·ªßa qu·ªπ trong c√°c kho·∫£ng th·ªùi gian kh√°c nhau, t√≠nh theo %.
- **1N**: 1 Ng√†y; **1T**: 1 Th√°ng; **3T**: 3 Th√°ng; **1NƒÉm**: 12 Th√°ng.
- D·ªØ li·ªáu ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o. Nh√† ƒë·∫ßu t∆∞ n√™n t√¨m hi·ªÉu k·ªπ tr∆∞·ªõc khi quy·∫øt ƒë·ªãnh.
""")
st.caption("(*) D·ªØ li·ªáu qu·ªπ m·ªü ƒë∆∞·ª£c t·ªïng h·ª£p t·ª´ Fmarket th√¥ng qua th∆∞ vi·ªán vnstock. C√≥ th·ªÉ c√≥ ƒë·ªô tr·ªÖ so v·ªõi th·ªùi gian th·ª±c.")